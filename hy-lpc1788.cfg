
transport select jtag
source [find target/lpc17xx.cfg]
adapter speed 1000
reset_config srst_only

proc ClearBit{data bit} {
	set data [expr {$data & ~(1<<$bit)}]
	return $data
}
 
proc SetBit {data bit} {
	set data [expr {$data | (1<<$bit)}]
	return $data
}	
     
proc init_board {} {
    # Delays on reset lines
    # adapter srst pulse_width 50
    # adapter srst delay 1000
  
    global _TARGETNAME
    global _CHIPNAME

    # A working area will help speeding the flash programming
    $_TARGETNAME configure -work-area-phys 0x10000000 -work-area-size 0x10000 -work-area-backup 0
    
    # External 16-bit flash at chip select CS0 (S29GL064, 8 MiB)
    flash bank $_CHIPNAME.extflash cfi 0x90000000 0x800000 2 2 $_TARGETNAME


    $_TARGETNAME configure -event reset-init {
        
				# Peripheral clocks
        mww 0x400FC0C4 0x04088A9E  ;# PCONP: (reset value)
				
				SetupClock{}
				enable_pll{}
				
				adapter speed 10000				
				#Send Sdram to low power mode
				mww 0x20098040 0x01000000  ;#output mode
				mww 0x20098058 0x01000000  ;#set pin
				sleep 500
				mww 0x2009805C 0x01000000  ;#clear pin
        sleep 500
				# Configure EMC Data pins
				mww 0x4002C180 0x00000201
				mww 0x4002C184 0x00000201
				mww 0x4002C188 0x00000201
				mww 0x4002C18C 0x00000201		
				mww 0x4002C190 0x00000201
				mww 0x4002C194 0x00000201
				mww 0x4002C198 0x00000201
				mww 0x4002C19C 0x00000201
				mww 0x4002C1A0 0x00000201
				mww 0x4002C1A4 0x00000201
				mww 0x4002C1A8 0x00000201
				mww 0x4002C1AC 0x00000201	
				mww 0x4002C1B0 0x00000201
				mww 0x4002C1B4 0x00000201
				mww 0x4002C1B8 0x00000201
				mww 0x4002C1BC 0x00000201
				
				# Configure EMC Address pins	
				mww 0x4002C204 0x00000201
				mww 0x4002C208 0x00000201
				mww 0x4002C20C 0x00000201		
				mww 0x4002C210 0x00000201
				mww 0x4002C214 0x00000201
				mww 0x4002C218 0x00000201
				mww 0x4002C21C 0x00000201
				mww 0x4002C220 0x00000201
				mww 0x4002C224 0x00000201
				mww 0x4002C228 0x00000201
				mww 0x4002C22C 0x00000201	
				mww 0x4002C230 0x00000201
				mww 0x4002C234 0x00000201
				mww 0x4002C238 0x00000201
				mww 0x4002C23C 0x00000201
				mww 0x4002C240 0x00000201
				mww 0x4002C244 0x00000201
				mww 0x4002C248 0x00000201
				mww 0x4002C24C 0x00000201		
				mww 0x4002C250 0x00000201
				mww 0x4002C254 0x00000201
				mww 0x4002C258 0x00000201
				
				# Configure CS1, W, OE
				mww 0x4002C260 0x00000201
				mww 0x4002C264 0x00000201
				mww 0x4002C27C 0x00000201
				
			  #Enable EMC 
				mww 0x2009C000 0x00000001
								
        # Flash access 1 CPU clock
        mww 0x400FC000 [expr{0x0000003A | (0x5 << 12)}] ;# FLASHCFG 1 cpu clock for memory access
       																							
				#Configure Memory Width    
				mww 0x2009C220 0x00000081   ;#STATICCONFIG1
																 
			 }
			 
			$_TARGETNAME configure -event gdb-attach {
			    # Without this gdb-attach will first time as probe will fail
			   reset init		 
			}
}

# Enable the PLL.
# Generate maximum CPU clock (72 MHz) Run from internal RC oscillator.
# Note: The PLL output runs at a frequency N times the desired CPU clock.
#       It is unavoidable that the CPU clock drops down to (4 MHz/N) during
#       the initialization!
#       Here: N=4
#       Note that if the PLL is already active at the time this script is
#       called, the effective value of N is the value of CCLKCFG at that time!
#
proc enable_pll {} {
    
    # Disable PLL (as it might already be enabled at this time!)
    mww 0x400FC080 0x00000000       ;# PLLCON: disable PLL
    mww 0x400FC08C 0x000000AA       ;# PLLFEED
    mww 0x400FC08C 0x00000055       ;# PLLFEED

    # Setup PLL to generate 288 MHz from internal RC oscillator
    
    mww 0x400FC084 0x00000008       ;# PLLCFG: Msel=8, Psel=0
		mww 0x400FC080 0x00000001       ;# PLLCON: enable PLL
    mww 0x400FC08C 0x000000AA       ;# PLLFEED
    mww 0x400FC08C 0x00000055       ;# PLLFEED
   
	  while 1 { 	
	 		if {[expr {[read_memory 0x400FC088 32 1] & 0x400}] == 0x400}
			break;
		}
    
		echo "********** PLL Configured **********"
		
    mww 0x400FC104 0x00000101       ;# CCLKSEL: divide by 1 (108 MHz) PLL source for the clock
		mww 0x400FC1A8 0x00000002       ;# PCLKCFG: divide by 2 (54 MHz)
		mww 0x400FC100 0x00000001				;# EMCCLKSEL: divide by 2 (54 MHz)
    
    } 
		
proc SetupClock{} {

	# Enable Oscillator 
	mww 0x400FC1A0 0x00000025	
	# Wait for Oscillator to be ready
	while 1 { 	
	 	if {[expr {[read_memory 0x400FC1A0 32 1] & 0x06}] == 0x06}
		break;
	}
	
	echo ""********** External Oscillator Configured **********"
	mww 0x400FC10C 0x00000001	;# main oscillator as a sysclock source
	mww 0x400FC104 [SetBit [read_memory 0x400FC104 32 1] 8] ;# cpu clocked from sysclock	 	
}


  
    
