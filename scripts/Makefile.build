src := $(obj)

PHONY := __build
__build:

obj-y :=
lib-y :=
targets := 

build-dir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
#$(info Entering Makefile.build)
include $(build-dir)/Makefile
include $(PROGDIR)/scripts/Makefile.include
include $(PROGDIR)/scripts/Makefile.lib

SHELL:=/bin/bash

subdir-builtin := $(sort $(filter %/built-in.a, $(real-obj-y)))

# Build the compiled-in targets
# ---------------------------------------------------------------------------
$(subdir-builtin): $(obj)/%/built-in.a: $(obj)/% ;

#$(info need-builtin = $(need-builtin))
ifdef need-builtin
targets-for-builtin += $(obj)/built-in.a
endif

targets += $(targets-for-builtin)
targets += $(filter-out $(subdir-builtin), $(real-obj-y))

# Built-in and composite module parts
$(obj)/%.o : $(src)/%.c
	$(Q)$(call compile,$(CC),$<,$@)

#object files
$(obj)/%.o : $(src)/%.S 
	$(Q)$(call compile,$(CC),$<,$@)

$(obj)/%.o : $(src)/%.cpp
	$(Q)$(call compile,$(CPP),$<,$@)

#--------  dependency files -----------------
ifneq ($(filter %.o, $(real-obj-y)),)
#$(info including file = $(real-obj-y:%.o=%.d))
-include $(real-obj-y:%.o=%.d)
endif

$(obj)/%.d : $(src)/%.c
	$(Q)$(call dependencies,$@,$(@:%.d=%.o))

$(obj)/%.d : $(src)/%.S
	$(Q)$(call dependencies,$@,$(@:%.d=%.o))

$(obj)/%.d : $(src)/%.cpp
	$(Q)$(call dependencies,$@,$(@:%.d=%.o))

#----------------------------------------------------
$(obj)/built-in.a: $(real-obj-y)
	@echo 'Building target: $@'
	$(Q)$(AR) -cDPrT $@ $?
	@echo 'Invoking: GNU Arm Cross Archiver'
	@echo 'Finished building target: $@'
	@echo ' '

__build: $(if $(BUILD_BUILTIN), $(targets-for-builtin)) \
		 $(subdir-ym)
	@:

# Descending
# ---------------------------------------------------------------------------
PHONY += $(subdir-ym)
$(subdir-ym):	
	$(Q)$(MAKE) $(build)=$@ \
	need-builtin=$(if $(filter $@/built-in.a, $(subdir-builtin)),1)
	
# Add FORCE to the prequisites of a target to force it to be always rebuilt.
# ---------------------------------------------------------------------------

PHONY += FORCE

FORCE:

.PHONY: $(PHONY)





